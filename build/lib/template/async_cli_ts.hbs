// package: {{{packageName}}}
// file: {{{fileName}}}

/* tslint:disable */

{{#each imports}}
{{{this}}}
{{/each}}

{{#each services}}

import { I{{{serviceName}}}Client, {{{serviceName}}}Client } from './{{ ../fileNameWithoutExt }}_grpc_pb';

export interface I{{{serviceName}}}AsyncClient extends I{{{serviceName}}}Client {
    {{#each methods}}
        {{#eq type "ClientUnaryCall"}}
    {{lcFirst methodName}}Async(request: {{{requestTypeName}}}, metadata?: grpc.Metadata, options?: Partial<grpc.CallOptions>): Promise<{{{responseTypeName}}}>;
        {{/eq}}
    {{/each}}
}

export class {{{serviceName}}}AsyncClient extends {{{serviceName}}}Client implements I{{{serviceName}}}AsyncClient {
    constructor(address: string, credentials: grpc.ChannelCredentials, options?: object) {
        super(address, credentials, options);
    }
    {{#each methods}}
        {{#eq type "ClientUnaryCall"}}
    public {{lcFirst methodName}}Async(request: {{{requestTypeName}}}, metadata?: grpc.Metadata, options?: Partial<grpc.CallOptions>): Promise<{{{responseTypeName}}}> {
        return new Promise((resolve, reject) => this.{{lcFirst methodName}}(request, metadata, options, (e, r) => e ? reject(e) : resolve(r)));
    }
        {{/eq}}
    {{/each}}
}
{{/each}}
